/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tilesort_2 (
    input clk,
    input up,
    input down,
    input left,
    input right,
    input center,
    output reg tile1_out,
    output reg tile2_out,
    output reg tile3_out,
    output reg tile4_out,
    output reg tile5_out,
    output reg tile6_out,
    output reg tile7_out,
    output reg tile8_out,
    output reg tile9_out,
    output reg tile10_out,
    output reg tile11_out,
    output reg tile12_out,
    output reg tile13_out,
    output reg tile14_out,
    output reg tile15_out,
    output reg tile16_out,
    output reg tile17_out,
    output reg tile18_out,
    output reg tile19_out,
    output reg tile20_out,
    output reg tile21_out,
    output reg tile22_out,
    output reg tile23_out,
    output reg tile24_out,
    output reg tile25_out,
    output reg selector_out,
    output reg debug1,
    output reg debug2,
    output reg debug3,
    output reg debug4
  );
  
  
  
  wire [1-1:0] M_selector_bitout;
  reg [10-1:0] M_selector_horizontaloffset;
  reg [9-1:0] M_selector_verticaloffset;
  selector_draw_3 selector (
    .clk(clk),
    .horizontaloffset(M_selector_horizontaloffset),
    .verticaloffset(M_selector_verticaloffset),
    .bitout(M_selector_bitout)
  );
  wire [1-1:0] M_counter_inc_state;
  stateCounter_4 counter (
    .clk(clk),
    .inc_state(M_counter_inc_state)
  );
  wire [1-1:0] M_tile1_shape0_bitout;
  reg [10-1:0] M_tile1_shape0_horizontaloffset;
  reg [9-1:0] M_tile1_shape0_verticaloffset;
  reg [3-1:0] M_tile1_shape0_orientation;
  shape5draw_5 tile1_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile1_shape0_horizontaloffset),
    .verticaloffset(M_tile1_shape0_verticaloffset),
    .orientation(M_tile1_shape0_orientation),
    .bitout(M_tile1_shape0_bitout)
  );
  wire [1-1:0] M_tile2_shape0_bitout;
  reg [10-1:0] M_tile2_shape0_horizontaloffset;
  reg [9-1:0] M_tile2_shape0_verticaloffset;
  reg [3-1:0] M_tile2_shape0_orientation;
  shape1draw_6 tile2_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile2_shape0_horizontaloffset),
    .verticaloffset(M_tile2_shape0_verticaloffset),
    .orientation(M_tile2_shape0_orientation),
    .bitout(M_tile2_shape0_bitout)
  );
  wire [1-1:0] M_tile3_shape0_bitout;
  reg [10-1:0] M_tile3_shape0_horizontaloffset;
  reg [9-1:0] M_tile3_shape0_verticaloffset;
  reg [3-1:0] M_tile3_shape0_orientation;
  shape1draw_6 tile3_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile3_shape0_horizontaloffset),
    .verticaloffset(M_tile3_shape0_verticaloffset),
    .orientation(M_tile3_shape0_orientation),
    .bitout(M_tile3_shape0_bitout)
  );
  wire [1-1:0] M_tile4_shape0_bitout;
  reg [10-1:0] M_tile4_shape0_horizontaloffset;
  reg [9-1:0] M_tile4_shape0_verticaloffset;
  reg [3-1:0] M_tile4_shape0_orientation;
  shape2draw_8 tile4_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile4_shape0_horizontaloffset),
    .verticaloffset(M_tile4_shape0_verticaloffset),
    .orientation(M_tile4_shape0_orientation),
    .bitout(M_tile4_shape0_bitout)
  );
  wire [1-1:0] M_tile5_shape0_bitout;
  reg [10-1:0] M_tile5_shape0_horizontaloffset;
  reg [9-1:0] M_tile5_shape0_verticaloffset;
  reg [3-1:0] M_tile5_shape0_orientation;
  shape1draw_6 tile5_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile5_shape0_horizontaloffset),
    .verticaloffset(M_tile5_shape0_verticaloffset),
    .orientation(M_tile5_shape0_orientation),
    .bitout(M_tile5_shape0_bitout)
  );
  wire [1-1:0] M_tile6_shape0_bitout;
  reg [10-1:0] M_tile6_shape0_horizontaloffset;
  reg [9-1:0] M_tile6_shape0_verticaloffset;
  reg [3-1:0] M_tile6_shape0_orientation;
  shape4draw_10 tile6_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile6_shape0_horizontaloffset),
    .verticaloffset(M_tile6_shape0_verticaloffset),
    .orientation(M_tile6_shape0_orientation),
    .bitout(M_tile6_shape0_bitout)
  );
  wire [1-1:0] M_tile7_shape0_bitout;
  reg [10-1:0] M_tile7_shape0_horizontaloffset;
  reg [9-1:0] M_tile7_shape0_verticaloffset;
  reg [3-1:0] M_tile7_shape0_orientation;
  shape0draw_11 tile7_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile7_shape0_horizontaloffset),
    .verticaloffset(M_tile7_shape0_verticaloffset),
    .orientation(M_tile7_shape0_orientation),
    .bitout(M_tile7_shape0_bitout)
  );
  wire [1-1:0] M_tile8_shape0_bitout;
  reg [10-1:0] M_tile8_shape0_horizontaloffset;
  reg [9-1:0] M_tile8_shape0_verticaloffset;
  reg [3-1:0] M_tile8_shape0_orientation;
  shape4draw_10 tile8_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile8_shape0_horizontaloffset),
    .verticaloffset(M_tile8_shape0_verticaloffset),
    .orientation(M_tile8_shape0_orientation),
    .bitout(M_tile8_shape0_bitout)
  );
  wire [1-1:0] M_tile9_shape0_bitout;
  reg [10-1:0] M_tile9_shape0_horizontaloffset;
  reg [9-1:0] M_tile9_shape0_verticaloffset;
  reg [3-1:0] M_tile9_shape0_orientation;
  shape1draw_6 tile9_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile9_shape0_horizontaloffset),
    .verticaloffset(M_tile9_shape0_verticaloffset),
    .orientation(M_tile9_shape0_orientation),
    .bitout(M_tile9_shape0_bitout)
  );
  wire [1-1:0] M_tile10_shape0_bitout;
  reg [10-1:0] M_tile10_shape0_horizontaloffset;
  reg [9-1:0] M_tile10_shape0_verticaloffset;
  reg [3-1:0] M_tile10_shape0_orientation;
  shape2draw_8 tile10_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile10_shape0_horizontaloffset),
    .verticaloffset(M_tile10_shape0_verticaloffset),
    .orientation(M_tile10_shape0_orientation),
    .bitout(M_tile10_shape0_bitout)
  );
  wire [1-1:0] M_tile11_shape0_bitout;
  reg [10-1:0] M_tile11_shape0_horizontaloffset;
  reg [9-1:0] M_tile11_shape0_verticaloffset;
  reg [3-1:0] M_tile11_shape0_orientation;
  shape3draw_15 tile11_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile11_shape0_horizontaloffset),
    .verticaloffset(M_tile11_shape0_verticaloffset),
    .orientation(M_tile11_shape0_orientation),
    .bitout(M_tile11_shape0_bitout)
  );
  wire [1-1:0] M_tile12_shape0_bitout;
  reg [10-1:0] M_tile12_shape0_horizontaloffset;
  reg [9-1:0] M_tile12_shape0_verticaloffset;
  reg [3-1:0] M_tile12_shape0_orientation;
  shape3draw_15 tile12_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile12_shape0_horizontaloffset),
    .verticaloffset(M_tile12_shape0_verticaloffset),
    .orientation(M_tile12_shape0_orientation),
    .bitout(M_tile12_shape0_bitout)
  );
  wire [1-1:0] M_tile13_shape0_bitout;
  reg [10-1:0] M_tile13_shape0_horizontaloffset;
  reg [9-1:0] M_tile13_shape0_verticaloffset;
  reg [3-1:0] M_tile13_shape0_orientation;
  shape4draw_10 tile13_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile13_shape0_horizontaloffset),
    .verticaloffset(M_tile13_shape0_verticaloffset),
    .orientation(M_tile13_shape0_orientation),
    .bitout(M_tile13_shape0_bitout)
  );
  wire [1-1:0] M_tile14_shape0_bitout;
  reg [10-1:0] M_tile14_shape0_horizontaloffset;
  reg [9-1:0] M_tile14_shape0_verticaloffset;
  reg [3-1:0] M_tile14_shape0_orientation;
  shape4draw_10 tile14_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile14_shape0_horizontaloffset),
    .verticaloffset(M_tile14_shape0_verticaloffset),
    .orientation(M_tile14_shape0_orientation),
    .bitout(M_tile14_shape0_bitout)
  );
  wire [1-1:0] M_tile15_shape0_bitout;
  reg [10-1:0] M_tile15_shape0_horizontaloffset;
  reg [9-1:0] M_tile15_shape0_verticaloffset;
  reg [3-1:0] M_tile15_shape0_orientation;
  shape1draw_6 tile15_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile15_shape0_horizontaloffset),
    .verticaloffset(M_tile15_shape0_verticaloffset),
    .orientation(M_tile15_shape0_orientation),
    .bitout(M_tile15_shape0_bitout)
  );
  wire [1-1:0] M_tile16_shape0_bitout;
  reg [10-1:0] M_tile16_shape0_horizontaloffset;
  reg [9-1:0] M_tile16_shape0_verticaloffset;
  reg [3-1:0] M_tile16_shape0_orientation;
  shape1draw_6 tile16_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile16_shape0_horizontaloffset),
    .verticaloffset(M_tile16_shape0_verticaloffset),
    .orientation(M_tile16_shape0_orientation),
    .bitout(M_tile16_shape0_bitout)
  );
  wire [1-1:0] M_tile17_shape0_bitout;
  reg [10-1:0] M_tile17_shape0_horizontaloffset;
  reg [9-1:0] M_tile17_shape0_verticaloffset;
  reg [3-1:0] M_tile17_shape0_orientation;
  shape2draw_8 tile17_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile17_shape0_horizontaloffset),
    .verticaloffset(M_tile17_shape0_verticaloffset),
    .orientation(M_tile17_shape0_orientation),
    .bitout(M_tile17_shape0_bitout)
  );
  wire [1-1:0] M_tile18_shape0_bitout;
  reg [10-1:0] M_tile18_shape0_horizontaloffset;
  reg [9-1:0] M_tile18_shape0_verticaloffset;
  reg [3-1:0] M_tile18_shape0_orientation;
  shape4draw_10 tile18_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile18_shape0_horizontaloffset),
    .verticaloffset(M_tile18_shape0_verticaloffset),
    .orientation(M_tile18_shape0_orientation),
    .bitout(M_tile18_shape0_bitout)
  );
  wire [1-1:0] M_tile19_shape0_bitout;
  reg [10-1:0] M_tile19_shape0_horizontaloffset;
  reg [9-1:0] M_tile19_shape0_verticaloffset;
  reg [3-1:0] M_tile19_shape0_orientation;
  shape1draw_6 tile19_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile19_shape0_horizontaloffset),
    .verticaloffset(M_tile19_shape0_verticaloffset),
    .orientation(M_tile19_shape0_orientation),
    .bitout(M_tile19_shape0_bitout)
  );
  wire [1-1:0] M_tile20_shape0_bitout;
  reg [10-1:0] M_tile20_shape0_horizontaloffset;
  reg [9-1:0] M_tile20_shape0_verticaloffset;
  reg [3-1:0] M_tile20_shape0_orientation;
  shape3draw_15 tile20_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile20_shape0_horizontaloffset),
    .verticaloffset(M_tile20_shape0_verticaloffset),
    .orientation(M_tile20_shape0_orientation),
    .bitout(M_tile20_shape0_bitout)
  );
  wire [1-1:0] M_tile21_shape0_bitout;
  reg [10-1:0] M_tile21_shape0_horizontaloffset;
  reg [9-1:0] M_tile21_shape0_verticaloffset;
  reg [3-1:0] M_tile21_shape0_orientation;
  shape3draw_15 tile21_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile21_shape0_horizontaloffset),
    .verticaloffset(M_tile21_shape0_verticaloffset),
    .orientation(M_tile21_shape0_orientation),
    .bitout(M_tile21_shape0_bitout)
  );
  wire [1-1:0] M_tile22_shape0_bitout;
  reg [10-1:0] M_tile22_shape0_horizontaloffset;
  reg [9-1:0] M_tile22_shape0_verticaloffset;
  reg [3-1:0] M_tile22_shape0_orientation;
  shape0draw_11 tile22_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile22_shape0_horizontaloffset),
    .verticaloffset(M_tile22_shape0_verticaloffset),
    .orientation(M_tile22_shape0_orientation),
    .bitout(M_tile22_shape0_bitout)
  );
  wire [1-1:0] M_tile23_shape0_bitout;
  reg [10-1:0] M_tile23_shape0_horizontaloffset;
  reg [9-1:0] M_tile23_shape0_verticaloffset;
  reg [3-1:0] M_tile23_shape0_orientation;
  shape2draw_8 tile23_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile23_shape0_horizontaloffset),
    .verticaloffset(M_tile23_shape0_verticaloffset),
    .orientation(M_tile23_shape0_orientation),
    .bitout(M_tile23_shape0_bitout)
  );
  wire [1-1:0] M_tile24_shape0_bitout;
  reg [10-1:0] M_tile24_shape0_horizontaloffset;
  reg [9-1:0] M_tile24_shape0_verticaloffset;
  reg [3-1:0] M_tile24_shape0_orientation;
  shape5draw_5 tile24_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile24_shape0_horizontaloffset),
    .verticaloffset(M_tile24_shape0_verticaloffset),
    .orientation(M_tile24_shape0_orientation),
    .bitout(M_tile24_shape0_bitout)
  );
  wire [1-1:0] M_tile25_shape0_bitout;
  reg [10-1:0] M_tile25_shape0_horizontaloffset;
  reg [9-1:0] M_tile25_shape0_verticaloffset;
  reg [3-1:0] M_tile25_shape0_orientation;
  shape1draw_6 tile25_shape0 (
    .clk(clk),
    .horizontaloffset(M_tile25_shape0_horizontaloffset),
    .verticaloffset(M_tile25_shape0_verticaloffset),
    .orientation(M_tile25_shape0_orientation),
    .bitout(M_tile25_shape0_bitout)
  );
  localparam S1_selected_tile = 5'd0;
  localparam S2_selected_tile = 5'd1;
  localparam S3_selected_tile = 5'd2;
  localparam S4_selected_tile = 5'd3;
  localparam S5_selected_tile = 5'd4;
  localparam S6_selected_tile = 5'd5;
  localparam S7_selected_tile = 5'd6;
  localparam S8_selected_tile = 5'd7;
  localparam S9_selected_tile = 5'd8;
  localparam S10_selected_tile = 5'd9;
  localparam S11_selected_tile = 5'd10;
  localparam S12_selected_tile = 5'd11;
  localparam S13_selected_tile = 5'd12;
  localparam S14_selected_tile = 5'd13;
  localparam S15_selected_tile = 5'd14;
  localparam S16_selected_tile = 5'd15;
  localparam S17_selected_tile = 5'd16;
  localparam S18_selected_tile = 5'd17;
  localparam S19_selected_tile = 5'd18;
  localparam S20_selected_tile = 5'd19;
  localparam S21_selected_tile = 5'd20;
  localparam S22_selected_tile = 5'd21;
  localparam S23_selected_tile = 5'd22;
  localparam S24_selected_tile = 5'd23;
  localparam S25_selected_tile = 5'd24;
  
  reg [4:0] M_selected_tile_d, M_selected_tile_q = S1_selected_tile;
  reg [2:0] M_tile1_orientation_d, M_tile1_orientation_q = 1'h0;
  reg [2:0] M_tile2_orientation_d, M_tile2_orientation_q = 1'h0;
  reg [2:0] M_tile3_orientation_d, M_tile3_orientation_q = 1'h0;
  reg [2:0] M_tile4_orientation_d, M_tile4_orientation_q = 1'h0;
  reg [2:0] M_tile5_orientation_d, M_tile5_orientation_q = 1'h0;
  reg [2:0] M_tile6_orientation_d, M_tile6_orientation_q = 1'h0;
  reg [2:0] M_tile7_orientation_d, M_tile7_orientation_q = 1'h0;
  reg [2:0] M_tile8_orientation_d, M_tile8_orientation_q = 1'h0;
  reg [2:0] M_tile9_orientation_d, M_tile9_orientation_q = 1'h0;
  reg [2:0] M_tile10_orientation_d, M_tile10_orientation_q = 1'h0;
  reg [2:0] M_tile11_orientation_d, M_tile11_orientation_q = 1'h0;
  reg [2:0] M_tile12_orientation_d, M_tile12_orientation_q = 1'h0;
  reg [2:0] M_tile13_orientation_d, M_tile13_orientation_q = 1'h0;
  reg [2:0] M_tile14_orientation_d, M_tile14_orientation_q = 1'h0;
  reg [2:0] M_tile15_orientation_d, M_tile15_orientation_q = 1'h0;
  reg [2:0] M_tile16_orientation_d, M_tile16_orientation_q = 1'h0;
  reg [2:0] M_tile17_orientation_d, M_tile17_orientation_q = 1'h0;
  reg [2:0] M_tile18_orientation_d, M_tile18_orientation_q = 1'h0;
  reg [2:0] M_tile19_orientation_d, M_tile19_orientation_q = 1'h0;
  reg [2:0] M_tile20_orientation_d, M_tile20_orientation_q = 1'h0;
  reg [2:0] M_tile21_orientation_d, M_tile21_orientation_q = 1'h0;
  reg [2:0] M_tile22_orientation_d, M_tile22_orientation_q = 1'h0;
  reg [2:0] M_tile23_orientation_d, M_tile23_orientation_q = 1'h0;
  reg [2:0] M_tile24_orientation_d, M_tile24_orientation_q = 1'h0;
  reg [2:0] M_tile25_orientation_d, M_tile25_orientation_q = 1'h0;
  localparam GAME_PLAYING_game_stage = 2'd0;
  localparam WIN_THE_LEVEL_game_stage = 2'd1;
  localparam WIN_THE_GAME_game_stage = 2'd2;
  
  reg [1:0] M_game_stage_d, M_game_stage_q = GAME_PLAYING_game_stage;
  reg M_tile1_d, M_tile1_q = 1'h0;
  reg M_tile2_d, M_tile2_q = 1'h0;
  reg M_tile3_d, M_tile3_q = 1'h0;
  reg M_tile4_d, M_tile4_q = 1'h0;
  reg M_tile5_d, M_tile5_q = 1'h0;
  reg M_tile6_d, M_tile6_q = 1'h0;
  reg M_tile7_d, M_tile7_q = 1'h0;
  reg M_tile8_d, M_tile8_q = 1'h0;
  reg M_tile9_d, M_tile9_q = 1'h0;
  reg M_tile10_d, M_tile10_q = 1'h0;
  reg M_tile11_d, M_tile11_q = 1'h0;
  reg M_tile12_d, M_tile12_q = 1'h0;
  reg M_tile13_d, M_tile13_q = 1'h0;
  reg M_tile14_d, M_tile14_q = 1'h0;
  reg M_tile15_d, M_tile15_q = 1'h0;
  reg M_tile16_d, M_tile16_q = 1'h0;
  reg M_tile17_d, M_tile17_q = 1'h0;
  reg M_tile18_d, M_tile18_q = 1'h0;
  reg M_tile19_d, M_tile19_q = 1'h0;
  reg M_tile20_d, M_tile20_q = 1'h0;
  reg M_tile21_d, M_tile21_q = 1'h0;
  reg M_tile22_d, M_tile22_q = 1'h0;
  reg M_tile23_d, M_tile23_q = 1'h0;
  reg M_tile24_d, M_tile24_q = 1'h0;
  reg M_tile25_d, M_tile25_q = 1'h0;
  reg [2:0] M_number_of_wins_d, M_number_of_wins_q = 1'h0;
  
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [8-1:0] M_alu_outalu;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_30 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .outalu(M_alu_outalu)
  );
  
  always @* begin
    M_game_stage_d = M_game_stage_q;
    M_selected_tile_d = M_selected_tile_q;
    M_tile15_orientation_d = M_tile15_orientation_q;
    M_tile4_orientation_d = M_tile4_orientation_q;
    M_tile11_orientation_d = M_tile11_orientation_q;
    M_tile5_orientation_d = M_tile5_orientation_q;
    M_tile9_d = M_tile9_q;
    M_tile8_d = M_tile8_q;
    M_tile7_d = M_tile7_q;
    M_tile6_d = M_tile6_q;
    M_tile10_orientation_d = M_tile10_orientation_q;
    M_tile1_d = M_tile1_q;
    M_tile7_orientation_d = M_tile7_orientation_q;
    M_tile5_d = M_tile5_q;
    M_tile4_d = M_tile4_q;
    M_tile3_d = M_tile3_q;
    M_tile2_d = M_tile2_q;
    M_tile2_orientation_d = M_tile2_orientation_q;
    M_tile23_orientation_d = M_tile23_orientation_q;
    M_tile6_orientation_d = M_tile6_orientation_q;
    M_tile8_orientation_d = M_tile8_orientation_q;
    M_tile18_orientation_d = M_tile18_orientation_q;
    M_tile20_orientation_d = M_tile20_orientation_q;
    M_tile25_orientation_d = M_tile25_orientation_q;
    M_tile19_orientation_d = M_tile19_orientation_q;
    M_tile13_orientation_d = M_tile13_orientation_q;
    M_number_of_wins_d = M_number_of_wins_q;
    M_tile24_orientation_d = M_tile24_orientation_q;
    M_tile21_orientation_d = M_tile21_orientation_q;
    M_tile9_orientation_d = M_tile9_orientation_q;
    M_tile23_d = M_tile23_q;
    M_tile22_d = M_tile22_q;
    M_tile12_orientation_d = M_tile12_orientation_q;
    M_tile21_d = M_tile21_q;
    M_tile17_orientation_d = M_tile17_orientation_q;
    M_tile20_d = M_tile20_q;
    M_tile3_orientation_d = M_tile3_orientation_q;
    M_tile24_d = M_tile24_q;
    M_tile25_d = M_tile25_q;
    M_tile16_orientation_d = M_tile16_orientation_q;
    M_tile10_d = M_tile10_q;
    M_tile12_d = M_tile12_q;
    M_tile11_d = M_tile11_q;
    M_tile17_d = M_tile17_q;
    M_tile18_d = M_tile18_q;
    M_tile14_orientation_d = M_tile14_orientation_q;
    M_tile19_d = M_tile19_q;
    M_tile13_d = M_tile13_q;
    M_tile14_d = M_tile14_q;
    M_tile15_d = M_tile15_q;
    M_tile16_d = M_tile16_q;
    M_tile22_orientation_d = M_tile22_orientation_q;
    M_tile1_orientation_d = M_tile1_orientation_q;
    
    M_alu_alufn = 6'h00;
    M_alu_a = 8'h00;
    M_alu_b = 8'h00;
    debug1 = 1'h0;
    debug2 = 1'h0;
    debug3 = 1'h0;
    debug4 = 1'h0;
    M_selector_horizontaloffset = 1'h0;
    M_selector_verticaloffset = 1'h0;
    selector_out = M_selector_bitout;
    M_tile1_shape0_horizontaloffset = 1'h0;
    M_tile1_shape0_verticaloffset = 1'h0;
    M_tile2_shape0_horizontaloffset = 7'h78;
    M_tile2_shape0_verticaloffset = 1'h0;
    M_tile3_shape0_horizontaloffset = 8'hf0;
    M_tile3_shape0_verticaloffset = 1'h0;
    M_tile4_shape0_horizontaloffset = 9'h168;
    M_tile4_shape0_verticaloffset = 1'h0;
    M_tile5_shape0_horizontaloffset = 9'h1e0;
    M_tile5_shape0_verticaloffset = 1'h0;
    M_tile6_shape0_horizontaloffset = 6'h3c;
    M_tile6_shape0_verticaloffset = 6'h34;
    M_tile7_shape0_horizontaloffset = 8'hb4;
    M_tile7_shape0_verticaloffset = 6'h34;
    M_tile8_shape0_horizontaloffset = 9'h12c;
    M_tile8_shape0_verticaloffset = 6'h34;
    M_tile9_shape0_horizontaloffset = 9'h1a4;
    M_tile9_shape0_verticaloffset = 6'h34;
    M_tile10_shape0_horizontaloffset = 10'h21c;
    M_tile10_shape0_verticaloffset = 6'h34;
    M_tile11_shape0_horizontaloffset = 1'h0;
    M_tile11_shape0_verticaloffset = 7'h68;
    M_tile12_shape0_horizontaloffset = 7'h78;
    M_tile12_shape0_verticaloffset = 7'h68;
    M_tile13_shape0_horizontaloffset = 8'hf0;
    M_tile13_shape0_verticaloffset = 7'h68;
    M_tile14_shape0_horizontaloffset = 9'h168;
    M_tile14_shape0_verticaloffset = 7'h68;
    M_tile15_shape0_horizontaloffset = 9'h1e0;
    M_tile15_shape0_verticaloffset = 7'h68;
    M_tile16_shape0_horizontaloffset = 6'h3c;
    M_tile16_shape0_verticaloffset = 8'h9c;
    M_tile17_shape0_horizontaloffset = 8'hb4;
    M_tile17_shape0_verticaloffset = 8'h9c;
    M_tile18_shape0_horizontaloffset = 9'h12c;
    M_tile18_shape0_verticaloffset = 8'h9c;
    M_tile19_shape0_horizontaloffset = 9'h1a4;
    M_tile19_shape0_verticaloffset = 8'h9c;
    M_tile20_shape0_horizontaloffset = 10'h21c;
    M_tile20_shape0_verticaloffset = 8'h9c;
    M_tile21_shape0_horizontaloffset = 1'h0;
    M_tile21_shape0_verticaloffset = 8'hd0;
    M_tile22_shape0_horizontaloffset = 7'h78;
    M_tile22_shape0_verticaloffset = 8'hd0;
    M_tile23_shape0_horizontaloffset = 8'hf0;
    M_tile23_shape0_verticaloffset = 8'hd0;
    M_tile24_shape0_horizontaloffset = 9'h168;
    M_tile24_shape0_verticaloffset = 8'hd0;
    M_tile25_shape0_horizontaloffset = 9'h1e0;
    M_tile25_shape0_verticaloffset = 8'hd0;
    if (M_tile1_orientation_q > 3'h5) begin
      M_tile1_orientation_d = 1'h0;
    end else begin
      if (M_tile1_orientation_q < 1'h0) begin
        M_tile1_orientation_d = 3'h5;
      end
    end
    if (M_tile2_orientation_q > 3'h5) begin
      M_tile2_orientation_d = 1'h0;
    end else begin
      if (M_tile2_orientation_q < 1'h0) begin
        M_tile2_orientation_d = 3'h5;
      end
    end
    if (M_tile3_orientation_q > 3'h5) begin
      M_tile3_orientation_d = 1'h0;
    end else begin
      if (M_tile3_orientation_q < 1'h0) begin
        M_tile3_orientation_d = 3'h5;
      end
    end
    if (M_tile4_orientation_q > 3'h5) begin
      M_tile4_orientation_d = 1'h0;
    end else begin
      if (M_tile4_orientation_q < 1'h0) begin
        M_tile4_orientation_d = 3'h5;
      end
    end
    if (M_tile5_orientation_q > 3'h5) begin
      M_tile5_orientation_d = 1'h0;
    end else begin
      if (M_tile5_orientation_q < 1'h0) begin
        M_tile5_orientation_d = 3'h5;
      end
    end
    if (M_tile6_orientation_q > 3'h5) begin
      M_tile6_orientation_d = 1'h0;
    end else begin
      if (M_tile6_orientation_q < 1'h0) begin
        M_tile6_orientation_d = 3'h5;
      end
    end
    if (M_tile7_orientation_q > 3'h5) begin
      M_tile7_orientation_d = 1'h0;
    end else begin
      if (M_tile7_orientation_q < 1'h0) begin
        M_tile7_orientation_d = 3'h5;
      end
    end
    if (M_tile8_orientation_q > 3'h5) begin
      M_tile8_orientation_d = 1'h0;
    end else begin
      if (M_tile8_orientation_q < 1'h0) begin
        M_tile8_orientation_d = 3'h5;
      end
    end
    if (M_tile9_orientation_q > 3'h5) begin
      M_tile9_orientation_d = 1'h0;
    end else begin
      if (M_tile9_orientation_q < 1'h0) begin
        M_tile9_orientation_d = 3'h5;
      end
    end
    if (M_tile10_orientation_q > 3'h5) begin
      M_tile10_orientation_d = 1'h0;
    end else begin
      if (M_tile10_orientation_q < 1'h0) begin
        M_tile10_orientation_d = 3'h5;
      end
    end
    if (M_tile11_orientation_q > 3'h5) begin
      M_tile11_orientation_d = 1'h0;
    end else begin
      if (M_tile11_orientation_q < 1'h0) begin
        M_tile11_orientation_d = 3'h5;
      end
    end
    if (M_tile12_orientation_q > 3'h5) begin
      M_tile12_orientation_d = 1'h0;
    end else begin
      if (M_tile12_orientation_q < 1'h0) begin
        M_tile12_orientation_d = 3'h5;
      end
    end
    if (M_tile13_orientation_q > 3'h5) begin
      M_tile13_orientation_d = 1'h0;
    end else begin
      if (M_tile13_orientation_q < 1'h0) begin
        M_tile13_orientation_d = 3'h5;
      end
    end
    if (M_tile14_orientation_q > 3'h5) begin
      M_tile14_orientation_d = 1'h0;
    end else begin
      if (M_tile14_orientation_q < 1'h0) begin
        M_tile14_orientation_d = 3'h5;
      end
    end
    if (M_tile15_orientation_q > 3'h5) begin
      M_tile15_orientation_d = 1'h0;
    end else begin
      if (M_tile15_orientation_q < 1'h0) begin
        M_tile15_orientation_d = 3'h5;
      end
    end
    if (M_tile16_orientation_q > 3'h5) begin
      M_tile16_orientation_d = 1'h0;
    end else begin
      if (M_tile16_orientation_q < 1'h0) begin
        M_tile16_orientation_d = 3'h5;
      end
    end
    if (M_tile17_orientation_q > 3'h5) begin
      M_tile17_orientation_d = 1'h0;
    end else begin
      if (M_tile17_orientation_q < 1'h0) begin
        M_tile17_orientation_d = 3'h5;
      end
    end
    if (M_tile18_orientation_q > 3'h5) begin
      M_tile18_orientation_d = 1'h0;
    end else begin
      if (M_tile18_orientation_q < 1'h0) begin
        M_tile18_orientation_d = 3'h5;
      end
    end
    if (M_tile19_orientation_q > 3'h5) begin
      M_tile19_orientation_d = 1'h0;
    end else begin
      if (M_tile19_orientation_q < 1'h0) begin
        M_tile19_orientation_d = 3'h5;
      end
    end
    if (M_tile20_orientation_q > 3'h5) begin
      M_tile20_orientation_d = 1'h0;
    end else begin
      if (M_tile20_orientation_q < 1'h0) begin
        M_tile20_orientation_d = 3'h5;
      end
    end
    if (M_tile21_orientation_q > 3'h5) begin
      M_tile21_orientation_d = 1'h0;
    end else begin
      if (M_tile21_orientation_q < 1'h0) begin
        M_tile21_orientation_d = 3'h5;
      end
    end
    if (M_tile22_orientation_q > 3'h5) begin
      M_tile22_orientation_d = 1'h0;
    end else begin
      if (M_tile22_orientation_q < 1'h0) begin
        M_tile22_orientation_d = 3'h5;
      end
    end
    if (M_tile23_orientation_q > 3'h5) begin
      M_tile23_orientation_d = 1'h0;
    end else begin
      if (M_tile23_orientation_q < 1'h0) begin
        M_tile23_orientation_d = 3'h5;
      end
    end
    if (M_tile24_orientation_q > 3'h5) begin
      M_tile24_orientation_d = 1'h0;
    end else begin
      if (M_tile24_orientation_q < 1'h0) begin
        M_tile24_orientation_d = 3'h5;
      end
    end
    if (M_tile25_orientation_q > 3'h5) begin
      M_tile25_orientation_d = 1'h0;
    end else begin
      if (M_tile25_orientation_q < 1'h0) begin
        M_tile25_orientation_d = 3'h5;
      end
    end
    M_tile1_shape0_orientation = M_tile1_orientation_q;
    tile1_out = M_tile1_shape0_bitout;
    M_tile2_shape0_orientation = M_tile2_orientation_q;
    tile2_out = M_tile2_shape0_bitout;
    M_tile3_shape0_orientation = M_tile3_orientation_q;
    tile3_out = M_tile3_shape0_bitout;
    M_tile4_shape0_orientation = M_tile4_orientation_q;
    tile4_out = M_tile4_shape0_bitout;
    M_tile5_shape0_orientation = M_tile5_orientation_q;
    tile5_out = M_tile5_shape0_bitout;
    M_tile6_shape0_orientation = M_tile6_orientation_q;
    tile6_out = M_tile6_shape0_bitout;
    M_tile7_shape0_orientation = M_tile7_orientation_q;
    tile7_out = M_tile7_shape0_bitout;
    M_tile8_shape0_orientation = M_tile8_orientation_q;
    tile8_out = M_tile8_shape0_bitout;
    M_tile9_shape0_orientation = M_tile9_orientation_q;
    tile9_out = M_tile9_shape0_bitout;
    M_tile10_shape0_orientation = M_tile10_orientation_q;
    tile10_out = M_tile10_shape0_bitout;
    M_tile11_shape0_orientation = M_tile11_orientation_q;
    tile11_out = M_tile11_shape0_bitout;
    M_tile12_shape0_orientation = M_tile12_orientation_q;
    tile12_out = M_tile12_shape0_bitout;
    M_tile13_shape0_orientation = M_tile13_orientation_q;
    tile13_out = M_tile13_shape0_bitout;
    M_tile14_shape0_orientation = M_tile14_orientation_q;
    tile14_out = M_tile14_shape0_bitout;
    M_tile15_shape0_orientation = M_tile15_orientation_q;
    tile15_out = M_tile15_shape0_bitout;
    M_tile16_shape0_orientation = M_tile16_orientation_q;
    tile16_out = M_tile16_shape0_bitout;
    M_tile17_shape0_orientation = M_tile17_orientation_q;
    tile17_out = M_tile17_shape0_bitout;
    M_tile18_shape0_orientation = M_tile18_orientation_q;
    tile18_out = M_tile18_shape0_bitout;
    M_tile19_shape0_orientation = M_tile19_orientation_q;
    tile19_out = M_tile19_shape0_bitout;
    M_tile20_shape0_orientation = M_tile20_orientation_q;
    tile20_out = M_tile20_shape0_bitout;
    M_tile21_shape0_orientation = M_tile21_orientation_q;
    tile21_out = M_tile21_shape0_bitout;
    M_tile22_shape0_orientation = M_tile22_orientation_q;
    tile22_out = M_tile22_shape0_bitout;
    M_tile23_shape0_orientation = M_tile23_orientation_q;
    tile23_out = M_tile23_shape0_bitout;
    M_tile24_shape0_orientation = M_tile24_orientation_q;
    tile24_out = M_tile24_shape0_bitout;
    M_tile25_shape0_orientation = M_tile25_orientation_q;
    tile25_out = M_tile25_shape0_bitout;
    if (M_tile1_orientation_q == 3'h5) begin
      M_tile1_d = 1'h1;
    end
    if (M_tile1_orientation_q != 3'h5) begin
      M_tile1_d = 1'h0;
    end
    if (M_tile2_orientation_q == 2'h3) begin
      M_tile2_d = 1'h1;
    end
    if (M_tile2_orientation_q != 2'h3) begin
      M_tile2_d = 1'h0;
    end
    if (M_tile3_orientation_q == 3'h4) begin
      M_tile3_d = 1'h1;
    end
    if (M_tile3_orientation_q != 3'h4) begin
      M_tile3_d = 1'h0;
    end
    if (M_tile4_orientation_q == 3'h4) begin
      M_tile4_d = 1'h1;
    end
    if (M_tile4_orientation_q != 3'h4) begin
      M_tile4_d = 1'h0;
    end
    if (M_tile5_orientation_q == 3'h4) begin
      M_tile5_d = 1'h1;
    end
    if (M_tile5_orientation_q != 3'h4) begin
      M_tile5_d = 1'h0;
    end
    if (M_tile6_orientation_q == 2'h2) begin
      M_tile6_d = 1'h1;
    end
    if (M_tile6_orientation_q != 2'h2) begin
      M_tile6_d = 1'h0;
    end
    if (M_tile7_orientation_q == 1'h0) begin
      M_tile7_d = 1'h1;
    end
    if (M_tile7_orientation_q != 1'h0) begin
      M_tile7_d = 1'h0;
    end
    if (M_tile8_orientation_q == 1'h0) begin
      M_tile8_d = 1'h1;
    end
    if (M_tile8_orientation_q != 1'h0) begin
      M_tile8_d = 1'h0;
    end
    if (M_tile9_orientation_q == 1'h1) begin
      M_tile9_d = 1'h1;
    end
    if (M_tile9_orientation_q != 1'h1) begin
      M_tile9_d = 1'h0;
    end
    if (M_tile10_orientation_q == 1'h0) begin
      M_tile10_d = 1'h1;
    end
    if (M_tile10_orientation_q != 1'h0) begin
      M_tile10_d = 1'h0;
    end
    if (M_tile11_orientation_q == 2'h3) begin
      M_tile11_d = 1'h1;
    end
    if (M_tile11_orientation_q != 2'h3) begin
      M_tile11_d = 1'h0;
    end
    if (M_tile12_orientation_q == 1'h0) begin
      M_tile12_d = 1'h1;
    end
    if (M_tile12_orientation_q != 1'h0) begin
      M_tile12_d = 1'h0;
    end
    if (M_tile13_orientation_q == 2'h3) begin
      M_tile13_d = 1'h1;
    end
    if (M_tile13_orientation_q != 2'h3) begin
      M_tile13_d = 1'h0;
    end
    if (M_tile14_orientation_q == 3'h4) begin
      M_tile14_d = 1'h1;
    end
    if (M_tile14_orientation_q != 3'h4) begin
      M_tile14_d = 1'h0;
    end
    if (M_tile15_orientation_q == 1'h0) begin
      M_tile15_d = 1'h1;
    end
    if (M_tile15_orientation_q != 1'h0) begin
      M_tile15_d = 1'h0;
    end
    if (M_tile16_orientation_q == 3'h5) begin
      M_tile16_d = 1'h1;
    end
    if (M_tile16_orientation_q != 3'h5) begin
      M_tile16_d = 1'h0;
    end
    if (M_tile17_orientation_q == 2'h3) begin
      M_tile17_d = 1'h1;
    end
    if (M_tile17_orientation_q != 2'h3) begin
      M_tile17_d = 1'h0;
    end
    if (M_tile18_orientation_q == 1'h0) begin
      M_tile18_d = 1'h1;
    end
    if (M_tile18_orientation_q != 1'h0) begin
      M_tile18_d = 1'h0;
    end
    if (M_tile19_orientation_q == 1'h1) begin
      M_tile19_d = 1'h1;
    end
    if (M_tile19_orientation_q != 1'h1) begin
      M_tile19_d = 1'h0;
    end
    if (M_tile20_orientation_q == 3'h5) begin
      M_tile20_d = 1'h1;
    end
    if (M_tile20_orientation_q != 3'h5) begin
      M_tile20_d = 1'h0;
    end
    if (M_tile21_orientation_q == 2'h2) begin
      M_tile21_d = 1'h1;
    end
    if (M_tile21_orientation_q != 2'h2) begin
      M_tile21_d = 1'h0;
    end
    if (M_tile22_orientation_q == 1'h0) begin
      M_tile22_d = 1'h1;
    end
    if (M_tile22_orientation_q != 5'h1e) begin
      M_tile22_d = 1'h0;
    end
    if (M_tile23_orientation_q == 1'h1) begin
      M_tile23_d = 1'h1;
    end
    if (M_tile23_orientation_q != 1'h1) begin
      M_tile23_d = 1'h0;
    end
    if (M_tile24_orientation_q == 2'h3) begin
      M_tile24_d = 1'h1;
    end
    if (M_tile24_orientation_q != 2'h3) begin
      M_tile24_d = 1'h0;
    end
    if (M_tile25_orientation_q == 1'h0) begin
      M_tile25_d = 1'h1;
    end
    if (M_tile25_orientation_q != 1'h0) begin
      M_tile21_d = 1'h0;
    end
    
    case (M_game_stage_q)
      GAME_PLAYING_game_stage: begin
        
        case (M_selected_tile_q)
          S1_selected_tile: begin
            M_selector_horizontaloffset = 1'h0;
            M_selector_verticaloffset = 1'h0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile1_orientation_q;
              M_tile1_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S25_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S2_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S21_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S6_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S2_selected_tile: begin
            M_selector_horizontaloffset = 7'h78;
            M_selector_verticaloffset = 1'h0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile2_orientation_q;
              M_tile2_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S1_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S3_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S22_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S7_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S3_selected_tile: begin
            M_selector_horizontaloffset = 8'hf0;
            M_selector_verticaloffset = 1'h0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile3_orientation_q;
              M_tile3_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S2_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S4_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S23_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S8_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S4_selected_tile: begin
            M_selector_horizontaloffset = 9'h168;
            M_selector_verticaloffset = 1'h0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile4_orientation_q;
              M_tile4_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S3_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S5_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S24_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S9_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S5_selected_tile: begin
            M_selector_horizontaloffset = 9'h1e0;
            M_selector_verticaloffset = 1'h0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile5_orientation_q;
              M_tile5_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S4_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S6_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S25_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S10_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S6_selected_tile: begin
            M_selector_horizontaloffset = 6'h3c;
            M_selector_verticaloffset = 6'h34;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile6_orientation_q;
              M_tile6_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S5_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S7_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S1_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S11_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S7_selected_tile: begin
            M_selector_horizontaloffset = 8'hb4;
            M_selector_verticaloffset = 6'h34;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile7_orientation_q;
              M_tile7_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S6_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S8_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S2_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S12_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S8_selected_tile: begin
            M_selector_horizontaloffset = 9'h12c;
            M_selector_verticaloffset = 6'h34;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile8_orientation_q;
              M_tile8_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S7_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S9_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S3_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S13_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S9_selected_tile: begin
            M_selector_horizontaloffset = 9'h1a4;
            M_selector_verticaloffset = 6'h34;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile9_orientation_q;
              M_tile9_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S8_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S10_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S4_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S14_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S10_selected_tile: begin
            M_selector_horizontaloffset = 10'h21c;
            M_selector_verticaloffset = 6'h34;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile10_orientation_q;
              M_tile10_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S9_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S11_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S5_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S15_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S11_selected_tile: begin
            M_selector_horizontaloffset = 1'h0;
            M_selector_verticaloffset = 7'h68;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile11_orientation_q;
              M_tile11_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S10_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S12_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S6_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S16_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S12_selected_tile: begin
            M_selector_horizontaloffset = 7'h78;
            M_selector_verticaloffset = 7'h68;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile12_orientation_q;
              M_tile12_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S11_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S13_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S7_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S17_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S13_selected_tile: begin
            M_selector_horizontaloffset = 8'hf0;
            M_selector_verticaloffset = 7'h68;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile13_orientation_q;
              M_tile13_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S12_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S14_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S8_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S18_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S14_selected_tile: begin
            M_selector_horizontaloffset = 9'h168;
            M_selector_verticaloffset = 7'h68;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile14_orientation_q;
              M_tile14_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S13_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S15_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S9_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S19_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S15_selected_tile: begin
            M_selector_horizontaloffset = 9'h1e0;
            M_selector_verticaloffset = 7'h68;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile15_orientation_q;
              M_tile15_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S14_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S16_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S10_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S20_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S16_selected_tile: begin
            M_selector_horizontaloffset = 6'h3c;
            M_selector_verticaloffset = 8'h9c;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile16_orientation_q;
              M_tile16_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S15_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S17_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S11_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S21_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S17_selected_tile: begin
            M_selector_horizontaloffset = 8'hb4;
            M_selector_verticaloffset = 8'h9c;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile17_orientation_q;
              M_tile17_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S16_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S18_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S12_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S22_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S18_selected_tile: begin
            M_selector_horizontaloffset = 9'h12c;
            M_selector_verticaloffset = 8'h9c;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile18_orientation_q;
              M_tile18_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S17_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S19_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S13_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S23_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S19_selected_tile: begin
            M_selector_horizontaloffset = 9'h1a4;
            M_selector_verticaloffset = 8'h9c;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile19_orientation_q;
              M_tile19_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S18_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S20_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S14_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S24_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S20_selected_tile: begin
            M_selector_horizontaloffset = 10'h21c;
            M_selector_verticaloffset = 8'h9c;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile20_orientation_q;
              M_tile20_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S19_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S21_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S15_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S25_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S21_selected_tile: begin
            M_selector_horizontaloffset = 1'h0;
            M_selector_verticaloffset = 8'hd0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile21_orientation_q;
              M_tile21_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S20_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S22_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S16_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S1_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S22_selected_tile: begin
            M_selector_horizontaloffset = 7'h78;
            M_selector_verticaloffset = 8'hd0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile22_orientation_q;
              M_tile22_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S21_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S23_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S17_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S2_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S23_selected_tile: begin
            M_selector_horizontaloffset = 8'hf0;
            M_selector_verticaloffset = 8'hd0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile23_orientation_q;
              M_tile23_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S22_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S24_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S18_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S3_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S24_selected_tile: begin
            M_selector_horizontaloffset = 9'h168;
            M_selector_verticaloffset = 8'hd0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile24_orientation_q;
              M_tile24_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S23_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S25_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S19_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S4_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
          S25_selected_tile: begin
            M_selector_horizontaloffset = 9'h1e0;
            M_selector_verticaloffset = 8'hd0;
            if (center & M_counter_inc_state) begin
              M_alu_alufn = 6'h00;
              M_alu_b = 8'h01;
              M_alu_a = M_tile25_orientation_q;
              M_tile25_orientation_d = M_alu_outalu[0+2-:3];
            end
            if (left & M_counter_inc_state) begin
              M_selected_tile_d = S24_selected_tile;
              debug1 = 1'h1;
            end
            if (right & M_counter_inc_state) begin
              M_selected_tile_d = S1_selected_tile;
              debug1 = 1'h1;
            end
            if (up & M_counter_inc_state) begin
              M_selected_tile_d = S20_selected_tile;
              debug1 = 1'h1;
            end
            if (down & M_counter_inc_state) begin
              M_selected_tile_d = S5_selected_tile;
              debug1 = 1'h1;
            end
            if (M_number_of_wins_q == 3'h5) begin
              M_game_stage_d = WIN_THE_GAME_game_stage;
            end
            if (M_number_of_wins_q < 3'h5 & M_tile1_q & M_tile2_q & M_tile3_q & M_tile4_q & M_tile5_q & M_tile6_q & M_tile7_q & M_tile8_q & M_tile9_q & M_tile10_q & M_tile11_q & M_tile12_q & M_tile13_q & M_tile14_q & M_tile15_q & M_tile16_q & M_tile17_q & M_tile18_q & M_tile19_q & M_tile20_q & M_tile21_q & M_tile22_q & M_tile23_q & M_tile24_q & M_tile25_q) begin
              M_number_of_wins_d = M_number_of_wins_q + 1'h1;
              M_game_stage_d = WIN_THE_LEVEL_game_stage;
            end
          end
        endcase
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_tile1_orientation_q <= M_tile1_orientation_d;
    M_tile2_orientation_q <= M_tile2_orientation_d;
    M_tile3_orientation_q <= M_tile3_orientation_d;
    M_tile4_orientation_q <= M_tile4_orientation_d;
    M_tile5_orientation_q <= M_tile5_orientation_d;
    M_tile6_orientation_q <= M_tile6_orientation_d;
    M_tile7_orientation_q <= M_tile7_orientation_d;
    M_tile8_orientation_q <= M_tile8_orientation_d;
    M_tile9_orientation_q <= M_tile9_orientation_d;
    M_tile10_orientation_q <= M_tile10_orientation_d;
    M_tile11_orientation_q <= M_tile11_orientation_d;
    M_tile12_orientation_q <= M_tile12_orientation_d;
    M_tile13_orientation_q <= M_tile13_orientation_d;
    M_tile14_orientation_q <= M_tile14_orientation_d;
    M_tile15_orientation_q <= M_tile15_orientation_d;
    M_tile16_orientation_q <= M_tile16_orientation_d;
    M_tile17_orientation_q <= M_tile17_orientation_d;
    M_tile18_orientation_q <= M_tile18_orientation_d;
    M_tile19_orientation_q <= M_tile19_orientation_d;
    M_tile20_orientation_q <= M_tile20_orientation_d;
    M_tile21_orientation_q <= M_tile21_orientation_d;
    M_tile22_orientation_q <= M_tile22_orientation_d;
    M_tile23_orientation_q <= M_tile23_orientation_d;
    M_tile24_orientation_q <= M_tile24_orientation_d;
    M_tile25_orientation_q <= M_tile25_orientation_d;
    M_tile1_q <= M_tile1_d;
    M_tile2_q <= M_tile2_d;
    M_tile3_q <= M_tile3_d;
    M_tile4_q <= M_tile4_d;
    M_tile5_q <= M_tile5_d;
    M_tile6_q <= M_tile6_d;
    M_tile7_q <= M_tile7_d;
    M_tile8_q <= M_tile8_d;
    M_tile9_q <= M_tile9_d;
    M_tile10_q <= M_tile10_d;
    M_tile11_q <= M_tile11_d;
    M_tile12_q <= M_tile12_d;
    M_tile13_q <= M_tile13_d;
    M_tile14_q <= M_tile14_d;
    M_tile15_q <= M_tile15_d;
    M_tile16_q <= M_tile16_d;
    M_tile17_q <= M_tile17_d;
    M_tile18_q <= M_tile18_d;
    M_tile19_q <= M_tile19_d;
    M_tile20_q <= M_tile20_d;
    M_tile21_q <= M_tile21_d;
    M_tile22_q <= M_tile22_d;
    M_tile23_q <= M_tile23_d;
    M_tile24_q <= M_tile24_d;
    M_tile25_q <= M_tile25_d;
    M_number_of_wins_q <= M_number_of_wins_d;
    M_selected_tile_q <= M_selected_tile_d;
    M_game_stage_q <= M_game_stage_d;
  end
  
endmodule
