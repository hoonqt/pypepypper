/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_36 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg z,
    output reg v,
    output reg n,
    output reg [7:0] outalu
  );
  
  
  
  wire [8-1:0] M_adder8_s;
  wire [1-1:0] M_adder8_z;
  wire [1-1:0] M_adder8_v;
  wire [1-1:0] M_adder8_n;
  reg [8-1:0] M_adder8_a;
  reg [8-1:0] M_adder8_b;
  reg [6-1:0] M_adder8_alufn;
  adder8_93 adder8 (
    .a(M_adder8_a),
    .b(M_adder8_b),
    .alufn(M_adder8_alufn),
    .s(M_adder8_s),
    .z(M_adder8_z),
    .v(M_adder8_v),
    .n(M_adder8_n)
  );
  
  wire [8-1:0] M_boole_outboo;
  reg [8-1:0] M_boole_a;
  reg [8-1:0] M_boole_b;
  reg [6-1:0] M_boole_alufn;
  boole_94 boole (
    .a(M_boole_a),
    .b(M_boole_b),
    .alufn(M_boole_alufn),
    .outboo(M_boole_outboo)
  );
  
  wire [8-1:0] M_shift_outshi;
  reg [8-1:0] M_shift_a;
  reg [8-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shift_95 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .outshi(M_shift_outshi)
  );
  
  wire [8-1:0] M_cmp_outcmp;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  reg [6-1:0] M_cmp_alufn;
  cmp_96 cmp (
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .alufn(M_cmp_alufn),
    .outcmp(M_cmp_outcmp)
  );
  
  always @* begin
    M_adder8_a = a;
    M_adder8_b = b;
    M_adder8_alufn = alufn;
    z = M_adder8_z;
    v = M_adder8_v;
    n = M_adder8_n;
    M_boole_a = a;
    M_boole_b = b;
    M_boole_alufn = alufn;
    M_shift_a = a;
    M_shift_b = b;
    M_shift_alufn = alufn;
    M_cmp_alufn = alufn;
    M_cmp_v = M_adder8_v;
    M_cmp_n = M_adder8_n;
    M_cmp_z = M_adder8_z;
    outalu = 1'h0;
    
    case (alufn[4+1-:2])
      2'h0: begin
        outalu = M_adder8_s;
      end
      2'h1: begin
        outalu = M_boole_outboo;
      end
      2'h2: begin
        outalu = M_shift_outshi;
      end
      2'h3: begin
        outalu = M_cmp_outcmp;
      end
    endcase
  end
endmodule
